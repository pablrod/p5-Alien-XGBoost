use alienfile;
use Alien::git;
use FFI::CheckLib;
use FFI::Platypus;
use Sys::Info;
use Config;
use Path::Tiny;

configure {
    requires 'Alien::git';
    requires 'FFI::CheckLib';
    requires 'FFI::Platypus';
    requires 'Sys::Info';
    requires 'Path::Tiny';
};

my $cpu_count = Sys::Info->new()->device('CPU')->count;
my $name = 'xgboost';
my $command   = 'xgboost' . $Config{'_exe'};
my $libprefix = $^O ne 'MSWin32' ? 'lib' : '';
my $libname = $libprefix . $name . '.' . $Config{'so'};

probe sub {
    my ($library) = FFI::CheckLib::find_lib_or_die(
        lib    => $name,
        verify => sub {
            my ( $name, $libpath ) = @_;
            my $platypus = FFI::Platypus->new;
            $platypus->lib($libpath);

            my $f =
              $platypus->function( 'XGDMatrixCreateFromMat_omp', [] => 'int' );    # This function was defined recently
        }
    );
    return ( defined $library ? 'system' : 'share' );
};

share {
    download [ [ Alien::git::exe, 'clone', '--recursive', 'https://github.com/dmlc/xgboost.git', $name ], ];

    plugin 'Extract::Directory' => ();
    extract [$name];

    plugin 'Build::CMake';
    build [
        [ '%{cmake}', @{ meta->prop->{plugin_build_cmake}->{args} }],
        '%{make}' . " -j $cpu_count",
        sub {
            my ($build) = @_;
            path( $build->install_prop->{stage}, 'dynamic' )->mkpath;
            path( $build->install_prop->{stage}, 'bin' )->mkpath;
        },
        [ '%{cp}', 'lib/' . $libname, '%{.install.stage}/dynamic/' ],
        [ '%{cp}', $command,            '%{.install.stage}/bin/' ],
    ];

    meta_prop->{destdir} = 0;
    plugin 'Gather::IsolateDynamic';
    gather sub {
        my ($build) = @_;
        $build->runtime_prop->{command} = $command;
    };
};

sys {
    gather sub {
        my ($build) = @_;
        $build->runtime_prop->{ffi_name} = $name;
    };
};

